import User from './types/user';
import Guild from './types/guild';
import Connection from './types/connection';
import Collection from '@discordjs/collection';
export declare type Scope = 'bot' | 'connections' | 'email' | 'identify' | 'guilds' | 'guilds.join' | 'gdm.join' | 'messages.read' | 'rpc' | 'rpc.api' | 'rpc.notifications.read' | 'webhook.incoming';
export declare class Client {
    private options;
    private baseURL;
    /** Create a new OAuth2 Client. */
    constructor(options: ClientOptions);
    /** Generates a authorization code link depending on the scopes and redirect URI set. */
    get authCodeLink(): {
        url: string;
        state: string;
    };
    /** Gets the access token for the user to perform further functions. */
    getAccess(code: string): Promise<string>;
    /** Gets a new access token for the user whose access token has expired. */
    refreshToken(key: string): Promise<string | void>;
    private getAccessKey;
    /** Gets the user who has authorized using the OAuth2 flow. */
    getUser(key: string): Promise<User>;
    /** Gets the guilds of an authorized user. */
    getGuilds(key: string): Promise<Collection<string, Guild>>;
    /** Gets the connected third-party accounts of an authorized user. */
    getConnections(key: string): Promise<Collection<string, Connection>>;
}
/** Required options for the client - https://discord.com/developers. */
export interface ClientOptions {
    /** Discord client ID. */
    id: string;
    /** Discord application secret. */
    secret: string;
    /** OAuth Redirect URI that is sent an access code. */
    redirectURI: string;
    /** Scopes for client access. */
    scopes: Scope[];
}
