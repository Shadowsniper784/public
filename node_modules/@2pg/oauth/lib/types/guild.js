"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var permissionConstants = {
    1: 'CREATE_INSTANT_INVITE',
    2: 'KICK_MEMBERS',
    4: 'BAN_MEMBERS',
    8: 'ADMINISTRATOR',
    0x10: 'MANAGE_CHANNELS',
    0x20: 'MANAGE_GUILD',
    0x40: 'ADD_REACTION',
    0x80: 'VIEW_AUDIT_LOG',
    0x400: 'VIEW_CHANNEL',
    0x800: 'SEND_MESSAGES',
    0x1000: 'SEND_TTS_MESSAGES',
    0x2000: 'MANAGE_MESSAGES',
    0x4000: 'EMBED_LINKS',
    0x8000: 'ATTACH_FILES',
    0x10000: 'READ_MESSAGES_HISTORY',
    0x20000: 'MENTION_EVERYONE',
    0x40000: 'USE_EXTERNAL_EMOJIS',
    0x100000: 'CONNECT',
    0x200000: 'SPEAK',
    0x400000: 'MUTE_MEMBERS',
    0x800000: 'MANAGE_NICKNAMES',
    0x1000000: 'MANAGE_ROLES',
    0x2000000: 'MANAGE_WEBHOOKS',
    0x4000000: 'MANAGE_EMOJIS'
};
var Guild = /** @class */ (function () {
    function Guild(_a) {
        var id = _a.id, name = _a.name, icon = _a.icon, _b = _a.features, features = _b === void 0 ? [] : _b, _c = _a.owner, owner = _c === void 0 ? false : _c, _d = _a.permissions, permissions = _d === void 0 ? 0 : _d;
        this.id = id;
        this.name = name;
        this.iconHash = icon;
        this.features = features;
        this.isOwner = owner;
        this.permissions = this.parsePermissions(permissions);
    }
    Object.defineProperty(Guild.prototype, "createdTimestamp", {
        /** The timestamp of creation of the user's account. */
        get: function () {
            return parseInt((BigInt(this.id) >> BigInt(22)).toString()) + 1420070400000;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Guild.prototype, "createdAt", {
        /** The time of creation of the user's account. */
        get: function () {
            return new Date(this.createdTimestamp);
        },
        enumerable: false,
        configurable: true
    });
    Guild.prototype.parsePermissions = function (perms) {
        var p = [];
        for (var c in permissionConstants) {
            var permNum = parseInt(c);
            if ((permNum & perms) === permNum)
                p.push(permissionConstants[permNum]);
        }
        return p;
    };
    /**
     * Returns a url to the guild icon.
     * @param size The size of the icon in pixels. (Defaults to 512)
     */
    Guild.prototype.iconUrl = function (size) {
        if (size === void 0) { size = 512; }
        return this.iconHash
            ? "https://cdn.discordapp.com/icons/" + this.id + "/" + this.iconHash + "." + (this.iconHash.startsWith('a_') ? 'gif' : 'png') + "?size=" + size
            : 'https://i.imgur.com/LvroChs.png';
    };
    return Guild;
}());
exports.default = Guild;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvZ3VpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLG1CQUFtQixHQUFHO0lBQzFCLENBQUMsRUFBRSx1QkFBdUI7SUFDMUIsQ0FBQyxFQUFFLGNBQWM7SUFDakIsQ0FBQyxFQUFFLGFBQWE7SUFDaEIsQ0FBQyxFQUFFLGVBQWU7SUFDbEIsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixJQUFJLEVBQUUsY0FBYztJQUNwQixJQUFJLEVBQUUsY0FBYztJQUNwQixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLEtBQUssRUFBRSxlQUFlO0lBQ3RCLE1BQU0sRUFBRSxtQkFBbUI7SUFDM0IsTUFBTSxFQUFFLGlCQUFpQjtJQUN6QixNQUFNLEVBQUUsYUFBYTtJQUNyQixNQUFNLEVBQUUsY0FBYztJQUN0QixPQUFPLEVBQUUsdUJBQXVCO0lBQ2hDLE9BQU8sRUFBRSxrQkFBa0I7SUFDM0IsT0FBTyxFQUFFLHFCQUFxQjtJQUM5QixRQUFRLEVBQUUsU0FBUztJQUNuQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsY0FBYztJQUN4QixRQUFRLEVBQUUsa0JBQWtCO0lBQzVCLFNBQVMsRUFBRSxjQUFjO0lBQ3pCLFNBQVMsRUFBRSxpQkFBaUI7SUFDNUIsU0FBUyxFQUFFLGVBQWU7Q0FDM0IsQ0FBQztBQUVGO0lBdUJFLGVBQVksRUFBaUU7WUFBL0QsRUFBRSxRQUFBLEVBQUUsSUFBSSxVQUFBLEVBQUUsSUFBSSxVQUFBLEVBQUUsZ0JBQWEsRUFBYixRQUFRLG1CQUFHLEVBQUUsS0FBQSxFQUFFLGFBQWEsRUFBYixLQUFLLG1CQUFHLEtBQUssS0FBQSxFQUFFLG1CQUFlLEVBQWYsV0FBVyxtQkFBRyxDQUFDLEtBQUE7UUFDekUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBZkQsc0JBQUksbUNBQWdCO1FBRHBCLHVEQUF1RDthQUN2RDtZQUNFLE9BQU8sUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQztRQUM5RSxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRCQUFTO1FBRGIsa0RBQWtEO2FBQ2xEO1lBQ0UsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQVdPLGdDQUFnQixHQUF4QixVQUF5QixLQUFhO1FBQ3BDLElBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUssSUFBSSxDQUFDLElBQUksbUJBQW1CLEVBQUU7WUFDakMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssT0FBTztnQkFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsdUJBQU8sR0FBUCxVQUFRLElBQVU7UUFBVixxQkFBQSxFQUFBLFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUTtZQUNsQixDQUFDLENBQUMsc0NBQW9DLElBQUksQ0FBQyxFQUFFLFNBQUksSUFBSSxDQUFDLFFBQVEsVUFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxlQUFTLElBQU07WUFDakUsQ0FBQyxDQUFDLGlDQUFpQyxDQUFDO0lBQ3hDLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQXBERCxJQW9EQyJ9